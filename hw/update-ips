#!/usr/bin/env python
# Francesco Conti <f.conti@unibo.it>
#
# Copyright (C) 2016-2019 ETH Zurich, University of Bologna.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from ipstools_cfg import *
import sys

try:
    os.mkdir("ips")
except OSError:
    pass

'''
    ===================================
    Clone from PULP platform repository
    ===================================
'''

git_group='pulp-platform'
tb_ips_list='ips_list_tb.yml'

# creates an IPApproX database
ipdb = ipstools.IPDatabase(
    skip_scripts=True,
    rtl_dir='rtl',
    ips_dir='ips',
    vsim_dir='sim',
    default_server=DEFAULT_SERVER,
    default_group=git_group,
    ips_list_yml_name=tb_ips_list
)

# updates the IPs from the git repo
ipdb.update_ips()

# launch generate-ips.py
ipdb.save_database()
execute("./generate-scripts")

'''
    ==========================
    Clone from user repository
    ==========================
'''

git_group=sys.argv[1]
hwpe_ips_list='ips_list_hwpe.yml'

# creates an IPApproX database
ipdb = ipstools.IPDatabase(
    skip_scripts=True,
    rtl_dir='rtl',
    ips_dir='ips',
    vsim_dir='sim',
    default_server=DEFAULT_SERVER,
    default_group=git_group,
    ips_list_yml_name=hwpe_ips_list
)

# updates the IPs from the git repo
ipdb.update_ips()

# launch generate-ips.py
ipdb.save_database()
execute("./generate-scripts")

'''
    =====================
    Generate vsim scripts
    =====================
'''

import yaml

vsim_ips_list='ips_list_vsim.yml'

# # Read tb ips list (from pulp_platform group)
# with open(tb_ips_list, "r") as l:
#     try:
#         print(yaml.safe_load(l))
#         ips_dict_0 = yaml.load(l)
#     except yaml.YAMLError as exc:
#         print(exc)

# # Read hwpe ips list (from user group)
# with open(hwpe_ips_list, "r") as l:
#     try:
#         print(yaml.safe_load(l))
#         ips_dict_1 = yaml.load(l)
#     except yaml.YAMLError as exc:
#         print(exc)

# # merge lists - scripts for vsim have 
# # to take into account all ips
# ips_list = ips_dict_0.copy()
# ips_list.update(ips_dict_1)

# creates an IPApproX database
ipdb = ipstools.IPDatabase(
    skip_scripts=True,
    rtl_dir='rtl',
    ips_dir='ips',
    vsim_dir='sim',
    default_server=DEFAULT_SERVER,
    ips_list_yml_name=vsim_ips_list
)

# launch generate-ips.py
ipdb.save_database()
execute("./generate-scripts")